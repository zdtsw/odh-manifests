apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-service-ca
  namespace: redhat-ods-monitoring
  annotations:
    service.beta.openshift.io/inject-cabundle: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: redhat-ods-monitoring
data:
  recording.rules: |
    groups:
      - name: SLOs - ODH Dashboard
        rules:
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[1d]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[1d]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate1d
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[1h]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[1h]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate1h
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[2h]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[2h]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate2h
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[30m]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[30m]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate30m
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[3d]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[3d]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate3d
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[5m]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[5m]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate5m
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard",code=~"5.."}[6h]))
            /
            sum(rate(haproxy_backend_http_responses_total{route="rhods-dashboard"}[6h]))
          labels:
            route: rhods-dashboard
          record: haproxy_backend_http_responses_total:burnrate6h

        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[1d])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate1d
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[1h])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate1h
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[2h])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate2h
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[30m])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate30m
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[3d])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate3d
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[5m])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate5m
        - expr: |
            1 - avg_over_time(probe_success{instance=~"rhods-dashboard-.*", job="user_facing_endpoints_status"}[6h])
          labels:
            instance: rhods-dashboard
          record: probe_success:burnrate6h

      - name: SLOs - Notebook Controller
        rules:
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status"}[1d]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate1d
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status"}[1h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate1h
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status"}[2h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate2h
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status"}[30m]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate30m
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status"}[3d]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate3d
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status"}[5m]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate5m
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status"}[6h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate6h

      - name: SLOs - ODH Model Controller
        rules:
        - expr: |
            absent(up{job=~'ODH Model Controller'}) * 0 or vector(1)
          labels:
            instance: odh-model-controller
          record: probe_success
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[1d]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate1d
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[1h]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate1h
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[2h]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate2h
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[30m]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate30m
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[3d]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate3d
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[5m]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate5m
        - expr: |
            1 - min(avg_over_time(probe_success{instance="odh-model-controller"}[6h]))
          labels:
            instance: odh-model-controller
          record: probe_success:burnrate6h

      - name: SLOs - Modelmesh Controller
        rules:
        - expr: |
            absent(up{job=~'Modelmesh Controller'}) * 0 or vector(1)
          labels:
            instance: modelmesh-controller
          record: probe_success
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[1d]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate1d
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[1h]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate1h
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[2h]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate2h
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[30m]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate30m
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[3d]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate3d
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[5m]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate5m
        - expr: |
            1 - min(avg_over_time(probe_success{instance="modelmesh-controller"}[6h]))
          labels:
            instance: modelmesh-controller
          record: probe_success:burnrate6h

      - name: SLOs - RHODS Operator
        interval: 15m
        rules:
        - expr: |
            rate(controller_runtime_reconcile_total{controller="kfdef-controller", job="RHODS Metrics", result!="success"}[15m])
          labels:
            instance: rhods-controller
          record: controller_runtime_reconcile_total:rate15m

      - name: SLOs - Data Science Pipelines Operator
        rules:
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[1d])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate1d
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[1h])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate1h
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[2h])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate2h
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[30m])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate30m
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[3d])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate3d
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[5m])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate5m
        - expr: |
            1 - avg_over_time(probe_success{instance=~"data-science-pipelines-operator-.*", job="user_facing_endpoints_status"}[6h])
          labels:
            instance: data-science-pipelines-operator
          record: probe_success:burnrate6h

      - name: SLOs - Data Science Pipelines Application
        rules:
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[1d])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[1d])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate1d
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[1h])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[1h])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate1h
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[2h])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[2h])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate2h
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[30m])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[30m])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate30m
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[3d])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[3d])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate3d
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[5m])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[5m])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate5m
        - expr: |
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*",code=~"5.."}[6h])) by (exported_namespace)
            /
            sum(rate(haproxy_backend_http_responses_total{route=~"ds-pipeline-.*"}[6h])) by (exported_namespace)
          labels:
            component: dsp
          record: haproxy_backend_http_responses_total:burnrate6h

      - name: Usage Metrics
        rules:
        - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"})
          record: rhods_total_users
          labels:
            instance: jupyter-notebooks
        - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"} ==1)
          record: rhods_active_users
          labels:
            instance: jupyter-notebooks

      - name: Availability Metrics
        rules:
        - expr: ((min(probe_success{name=~"rhods-dashboard|notebook-spawner"}) by (name) or on() vector(0)) or label_replace(min(probe_success{name=~"rhods-dashboard|notebook-spawner"}), "name", "combined", "name", ".*"))
          record: rhods_aggregate_availability

  alerting.rules: |
    groups:
      - name: DeadManSnitch
        interval: 1m
        rules:
          - alert: DeadManSnitch
            expr: vector(1)
            labels:
              severity: critical
            annotations:
              description: This is a DeadManSnitch to ensure RHODS monitoring and alerting pipeline is online.
              summary: Alerting DeadManSnitch

      - name: SLOs-haproxy_backend_http_responses_total
        rules:
        - alert: RHODS Dashboard Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-error-burn-rate.md'
            summary: RHODS Dashboard Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate5m{route=~"rhods-dashboard"}) by (route) > (14.40 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate1h{route=~"rhods-dashboard"}) by (route) > (14.40 * (1-0.99950))
          for: 2m
          labels:
            severity: critical
        - alert: RHODS Dashboard Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-error-burn-rate.md'
            summary: RHODS Dashboard Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate30m{route=~"rhods-dashboard"}) by (route) > (6.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate6h{route=~"rhods-dashboard"}) by (route) > (6.00 * (1-0.99950))
          for: 15m
          labels:
            severity: critical
        - alert: RHODS Dashboard Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-error-burn-rate.md'
            summary: RHODS Dashboard Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate2h{route=~"rhods-dashboard"}) by (route) > (3.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate1d{route=~"rhods-dashboard"}) by (route) > (3.00 * (1-0.99950))
          for: 1h
          labels:
            severity: warning
        - alert: RHODS Dashboard Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-error-burn-rate.md'
            summary: RHODS Dashboard Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate6h{route=~"rhods-dashboard"}) by (route) > (1.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate3d{route=~"rhods-dashboard"}) by (route) > (1.00 * (1-0.99950))
          for: 3h
          labels:
            severity: warning

        - alert: Data Science Pipelines Application Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-error-burn-rate.md'
            summary: Data Science Pipelines Application Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate5m{component="dsp"}) by (exported_namespace) > (14.40 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate1h{component="dsp"}) by (exported_namespace) > (14.40 * (1-0.99950))
          for: 2m
          labels:
            severity: info
        - alert: Data Science Pipelines Application Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-error-burn-rate.md'
            summary: Data Science Pipelines Application Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate30m{component="dsp"}) by (exported_namespace) > (6.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate6h{component="dsp"}) by (exported_namespace) > (6.00 * (1-0.99950))
          for: 15m
          labels:
            severity: info
        - alert: Data Science Pipelines Application Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-error-burn-rate.md'
            summary: Data Science Pipelines Application Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate2h{component="dsp"}) by (exported_namespace) > (3.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate1d{component="dsp"}) by (exported_namespace) > (3.00 * (1-0.99950))
          for: 1h
          labels:
            severity: info
        - alert: Data Science Pipelines Application Route Error Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.route }} (current value: {{ $value }}).'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-error-burn-rate.md'
            summary: Data Science Pipelines Application Route Error Burn Rate
          expr: |
            sum(haproxy_backend_http_responses_total:burnrate6h{component="dsp"}) by (exported_namespace) > (1.00 * (1-0.99950))
            and
            sum(haproxy_backend_http_responses_total:burnrate3d{component="dsp"}) by (exported_namespace) > (1.00 * (1-0.99950))
          for: 3h
          labels:
            severity: info

      - name: RHODS-PVC-Usage
        rules:
        - alert: User notebook pvc usage above 90%
          annotations:
            message: 'The user notebook {{ $labels.persistentvolumeclaim }} is using 90% of its Volume. You might want to decrease the amount of data stored on the server or you can reach out to your cluster admin to increase the storage capacity to prevent disruptions and loss of data. Please back up your data before increasing the storage limit.'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/tree/main/RHODS"
            summary: User notebook pvc usage above 90%
          expr: kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"} / kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} > 0.9 and kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"} / kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} < 0.99
          for: 2m
          labels:
            severity: warning
            route: user-notifications
        - alert: User notebook pvc usage at 100%
          annotations:
            message: 'The user notebook {{ $labels.persistentvolumeclaim }} is using 100% of its Volume. You might want to decrease the amount of data stored on the server or you can reach out to your cluster admin to increase the storage capacity to prevent disruptions and loss of data. Please back up your data before increasing the storage limit.'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/tree/main/RHODS"
            summary: User notebook pvc usage at 100%
          expr: kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"}/kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} > 0.99
          for: 2m
          labels:
            severity: warning
            route: user-notifications

      - name: SLOs-probe_success
        rules:
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-jupyter-probe-success-burn-rate.md"
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{instance=~"notebook-spawner"}) by (instance) > (14.40 * (1-0.98000))
            and
            sum(probe_success:burnrate1h{instance=~"notebook-spawner"}) by (instance) > (14.40 * (1-0.98000))
          for: 2m
          labels:
            severity: critical
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-jupyter-probe-success-burn-rate.md"
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{instance=~"notebook-spawner"}) by (instance) > (6.00 * (1-0.98000))
            and
            sum(probe_success:burnrate6h{instance=~"notebook-spawner"}) by (instance) > (6.00 * (1-0.98000))
          for: 15m
          labels:
            severity: critical
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-jupyter-probe-success-burn-rate.md"
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{instance=~"notebook-spawner"}) by (instance) > (3.00 * (1-0.98000))
            and
            sum(probe_success:burnrate1d{instance=~"notebook-spawner"}) by (instance) > (3.00 * (1-0.98000))
          for: 1h
          labels:
            severity: warning
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-jupyter-probe-success-burn-rate.md"
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate6h{instance=~"notebook-spawner"}) by (instance) > (1.00 * (1-0.98000))
            and
            sum(probe_success:burnrate3d{instance=~"notebook-spawner"}) by (instance) > (1.00 * (1-0.98000))
          for: 3h
          labels:
            severity: warning
        - alert: RHODS Dashboard Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-dashboard-probe-success-burn-rate.md"
            summary: RHODS Dashboard Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{name=~"rhods-dashboard"}) by (name) > (14.40 * (1-0.99950))
            and
            sum(probe_success:burnrate1h{name=~"rhods-dashboard"}) by (name) > (14.40 * (1-0.99950))
          for: 2m
          labels:
            severity: critical
        - alert: RHODS Dashboard Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-dashboard-probe-success-burn-rate.md"
            summary: RHODS Dashboard Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{name=~"rhods-dashboard"}) by (name) > (6.00 * (1-0.99950))
            and
            sum(probe_success:burnrate6h{name=~"rhods-dashboard"}) by (name) > (6.00 * (1-0.99950))
          for: 15m
          labels:
            severity: critical
        - alert: RHODS Dashboard Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-dashboard-probe-success-burn-rate.md"
            summary: RHODS Dashboard Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{name=~"rhods-dashboard"}) by (name) > (3.00 * (1-0.99950))
            and
            sum(probe_success:burnrate1d{name=~"rhods-dashboard"}) by (name) > (3.00 * (1-0.99950))
          for: 1h
          labels:
            severity: warning
        - alert: RHODS Dashboard Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/RHODS-Dashboard/rhods-dashboard-probe-success-burn-rate.md"
            summary: RHODS Dashboard Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate6h{name=~"rhods-dashboard"}) by (name) > (1.00 * (1-0.99950))
            and
            sum(probe_success:burnrate3d{name=~"rhods-dashboard"}) by (name) > (1.00 * (1-0.99950))
          for: 3h
          labels:
            severity: warning
        - alert: ODH Model Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-odh-controller-probe-success-burn-rate.md"
            summary: ODH Model Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{instance=~"odh-model-controller"}) by (instance) > (14.40 * (1-0.98000))
            and
            sum(probe_success:burnrate1h{instance=~"odh-model-controller"}) by (instance) > (14.40 * (1-0.98000))
          for: 2m
          labels:
            severity: critical
        - alert: ODH Model Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-odh-controller-probe-success-burn-rate.md"
            summary: ODH Model Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{instance=~"odh-model-controller"}) by (instance) > (6.00 * (1-0.98000))
            and
            sum(probe_success:burnrate6h{instance=~"odh-model-controller"}) by (instance) > (6.00 * (1-0.98000))
          for: 15m
          labels:
            severity: critical
        - alert: ODH Model Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-odh-controller-probe-success-burn-rate.md"
            summary: ODH Model Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{instance=~"odh-model-controller"}) by (instance) > (3.00 * (1-0.98000))
            and
            sum(probe_success:burnrate1d{instance=~"odh-model-controller"}) by (instance) > (3.00 * (1-0.98000))
          for: 1h
          labels:
            severity: warning
        - alert: Modelmesh Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-modelmesh-controller-probe-success-burn-rate.md"
            summary: Modelmesh Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{instance=~"modelmesh-controller"}) by (instance) > (14.40 * (1-0.98000))
            and
            sum(probe_success:burnrate1h{instance=~"modelmesh-controller"}) by (instance) > (14.40 * (1-0.98000))
          for: 2m
          labels:
            severity: critical
        - alert: Modelmesh Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-modelmesh-controller-probe-success-burn-rate.md"
            summary: Modelmesh Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{instance=~"modelmesh-controller"}) by (instance) > (6.00 * (1-0.98000))
            and
            sum(probe_success:burnrate6h{instance=~"modelmesh-controller"}) by (instance) > (6.00 * (1-0.98000))
          for: 15m
          labels:
            severity: critical
        - alert: Modelmesh Controller Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/ModelMesh-Serving/rhods-modelmesh-controller-probe-success-burn-rate.md"
            summary: Modelmesh Controller Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{instance=~"modelmesh-controller"}) by (instance) > (3.00 * (1-0.98000))
            and
            sum(probe_success:burnrate1d{instance=~"modelmesh-controller"}) by (instance) > (3.00 * (1-0.98000))
          for: 1h
          labels:
            severity: warning

        - alert: Data Science Pipelines Operator Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-operator-probe-success-burn-rate.md"
            summary: Data Science Pipelines Operator Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{instance=~"data-science-pipelines-operator"}) by (instance) > (14.40 * (1-0.98000))
            and
            sum(probe_success:burnrate1h{instance=~"data-science-pipelines-operator"}) by (instance) > (14.40 * (1-0.98000))
          for: 2m
          labels:
            severity: critical
        - alert: Data Science Pipelines Operator Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-operator-probe-success-burn-rate.md"
            summary: Data Science Pipelines Operator Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{instance=~"data-science-pipelines-operator"}) by (instance) > (6.00 * (1-0.98000))
            and
            sum(probe_success:burnrate6h{instance=~"data-science-pipelines-operator"}) by (instance) > (6.00 * (1-0.98000))
          for: 15m
          labels:
            severity: critical
        - alert: Data Science Pipelines Operator Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-operator-probe-success-burn-rate.md"
            summary: Data Science Pipelines Operator Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{instance=~"data-science-pipelines-operator"}) by (instance) > (3.00 * (1-0.98000))
            and
            sum(probe_success:burnrate1d{instance=~"data-science-pipelines-operator"}) by (instance) > (3.00 * (1-0.98000))
          for: 1h
          labels:
            severity: warning

      - name: RHODS Notebook controllers
        rules:
        - alert: Kubeflow notebook controller pod is not running
          annotations:
            message: 'Kubeflow Notebook controller is down!'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-kfnbc-notebook-controller-alert.md"
            summary: Kubeflow notebook controller pod is not running
          expr: absent(up{job=~'Kubeflow Notebook Controller Service Metrics'})
          for: 5m
          labels:
            severity: warning
        - alert: ODH notebook controller pod is not running
          annotations:
            message: 'ODH notebook controller is down!'
            triage: "https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Jupyter/rhods-odh-notebook-controller-alert.md"
            summary: ODH notebook controller pod is not running
          expr: absent(up{job=~'ODH Notebook Controller Service Metrics'})
          for: 5m
          labels:
            severity: warning

      - name: RHODS Data Science Pipelines
        rules:
        - alert: Data Science Pipeline Application Unavailable
          annotations:
            message: 'Data Science Pipelines Application is down!'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-component-readiness-status.md'
            summary: The Data Science Pipelines Application CustomResource "{{ $labels.dspa_name }}" in namespace "{{ $labels.dspa_namespace }}" has been NotReady for more than 5 minutes
          expr: min(max_over_time(data_science_pipelines_application_ready[3m])) by (dspa_name, dspa_namespace) == 0
          for: 2m
          labels:
            severity: info
        - alert: Data Science Pipeline APIServer Unavailable
          annotations:
            message: 'Data Science Pipelines APIServer component is down!'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-component-readiness-status.md'
            summary: A Data Science Pipelines APIServer pod owned by DSPA "{{ $labels.dspa_name }}" in namespace "{{ $labels.dspa_namespace }}" has been NotReady for more than 5 minutes
          expr: min(max_over_time(data_science_pipelines_application_apiserver_ready[3m])) by (dspa_name, dspa_namespace) == 0
          for: 2m
          labels:
            severity: info
        - alert: Data Science Pipeline PersistenceAgent Unavailable
          annotations:
            message: 'Data Science Pipelines PersistenceAgent component is down!'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-component-readiness-status.md'
            summary: A Data Science Pipelines PersistenceAgent pod owned by DSPA "{{ $labels.dspa_name }}" in namespace "{{ $labels.dspa_namespace }}" has been NotReady for more than 5 minutes
          expr: min(max_over_time(data_science_pipelines_application_persistenceagent_ready[3m])) by (dspa_name, dspa_namespace) == 0
          for: 2m
          labels:
            severity: info
        - alert: Data Science Pipeline ScheduledWorkflows Unavailable
          annotations:
            message: 'Data Science Pipelines ScheduledWorkflows component is down!'
            triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Data-Science-Pipelines/data-science-pipelines-application-component-readiness-status.md'
            summary: A Data Science Pipelines ScheduledWorkflow controller pod owned by DSPA "{{ $labels.dspa_name }}" in namespace "{{ $labels.dspa_namespace }}" has been NotReady for more than 5 minutes
          expr: min(max_over_time(data_science_pipelines_application_scheduledworkflow_ready[3m])) by (dspa_name, dspa_namespace) == 0
          for: 2m
          labels:
            severity: info
  prometheus.yml: |
    rule_files:
      - '*.rules'
    global:
      scrape_interval:     10s
      evaluation_interval: 10s

    scrape_configs:
    - job_name: 'Federate Prometheus'
      scrape_interval: 30s
      scheme: https
      tls_config:
        server_name: prometheus-k8s.openshift-monitoring.svc
        ca_file: /etc/prometheus/ca/service-ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      honor_labels: true
      metrics_path: '/federate'

      params:
        'match[]':
          - '{__name__= "haproxy_backend_http_responses_total"}'
          - '{__name__= "controller_runtime_reconcile_total"}'
          - '{__name__= "container_cpu_usage_seconds_total"}'
          - '{__name__= "container_memory_rss"}'
          - '{__name__= "kubelet_volume_stats_used_bytes"}'
          - '{__name__= "kubelet_volume_stats_capacity_bytes"}'
          - '{__name__= "kube_pod_container_status_waiting_reason"}'
          - '{__name__= "kube_pod_container_status_restarts_total"}'
          - '{__name__= "kube_pod_container_status_terminated_reason"}'
          - '{__name__= "openshift_build_status_phase_total"}'
          - '{__name__= "kube_statefulset_replicas"}'


      static_configs:
        - targets:
          - "prometheus-k8s.openshift-monitoring.svc.cluster.local:9091"

    - job_name: 'user_facing_endpoints_status'
      scrape_interval: 10s
      metrics_path: /probe
      scheme: https
      tls_config:
        insecure_skip_verify: true
      params:
        module: [http_2xx]
      authorization:
        credentials_file: /run/secrets/kubernetes.io/serviceaccount/token
      static_configs:
      - targets: [<rhods_dashboard_host>]
        labels:
          name: rhods-dashboard
      - targets: [<notebook_spawner_host>]
        labels:
          name: notebook-spawner
      - targets: [<data_science_pipelines_operator_host>]
        labels:
          name: data-science-pipelines-operator
      relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter.redhat-ods-monitoring.svc.cluster.local:9114

    - job_name: 'Kubeflow Notebook Controller Service Metrics'
      honor_labels: true
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-applications
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(notebook-controller-service)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8080

    - job_name: 'ODH Notebook Controller Service Metrics'
      honor_labels: true
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-applications
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(odh-notebook-controller-service)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8080
    
    - job_name: 'ODH Model Controller'
      honor_labels: true
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-applications
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(odh-model-controller-metrics-service)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8080

    - job_name: 'Modelmesh Controller'
      honor_labels: true
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-applications
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(modelmesh-controller)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8080

    - job_name: 'Data Science Pipelines Operator'
      honor_labels: true
      metrics_path: /metrics
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-applications
      relabel_configs:
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8080
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(data-science-pipelines-operator-service)$
          target_label: kubernetes_name
          action: keep
      metric_relabel_configs:
        - target_label: namespace
          replacement: redhat-ods-applications

    - job_name: 'Data Science Pipelines Application'
      honor_labels: true
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(ds-pipeline-.*)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):8888
          target_label: __address__
          action: keep
        - source_labels: [__meta_kubernetes_service_name]
          target_label: dspa_service
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace

    - job_name: 'RHODS Metrics'
      honor_labels: true
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - redhat-ods-operator
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: ^(rhods-operator-metrics)$
          target_label: kubernetes_name
          action: keep
        - source_labels: [__address__]
          regex: (.+):(\d+)
          target_label: __address__
          replacement: ${1}:8383

    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "localhost:9093"
